!function (t) { var e = function (e, i) { this.defaultSettings = { search: !0, width: "200px", defaultText: "Select me", className: "", inputName: "bselect-input", selected: 0, checkInView: !0, opened: !1, multiple: !1, closeOnSelect: !0, elipsis: !0, focusDelay: 100, doneTypingInterval: 180 }, this.settings = t.extend(this.defaultSettings, i), this.element = e, this.selectedItems = null, this.elipsis = this.settings.elipsis ? "elipsis" : "", this.searchInputValue = "", this.jsonData = this.settings.data ? this.settings.data : null, this.id = t(e).attr("id"), this.typingTimer = null, this.build() }; e.prototype.build = function () { this.build_template(), this.bind_events() }, e.prototype.build_template = function () { var e = '<div class="bselect ' + this.settings.className + '" id="' + this.id + '-bselect">'; if (e += null != this.settings.input ? this.settings.search : "<input type='hidden' name='" + this.settings.inputName + "' value='' class='bselect-input' />", e += "<div class='bselect-active " + (this.settings.multiple ? "" : "elipsis") + "'>" + this.wrapSelected(this.settings.defaultText) + "</div>", e += "<div class='bselect-content'>", this.settings.search && (e += "<div class='bselect-search'><input type='text' name='s' placeholder='Search...' autocomplete='off'/></div>"), this.jsonData) { for (var i in e += "<ul class='bselect-list'>", this.jsonData) e += this.buildOption(i); e += "</ul>" } e += "</div>", e += "</div>"; var s = t("#" + this.id); s.html(e), this.bselect = s.find(".bselect"), this.active = s.find(".bselect-active"), this.search = s.find(".bselect-search"), this.searchInput = this.search.find("input"), this.content = s.find(".bselect-content"), this.input = s.find(".bselect-input"), this.list = s.find(".bselect-list"), this.list_items = this.list.children(), this.bselect.css("width", this.settings.width); var n = t(this.bselect).width(); if (t(this.content).css("width", n), this.settings.selected) if (t.isArray(this.settings.selected)) { var l = this; t.each(this.settings.selected, function (t, e) { l.selectById(e, !1) }) } else this.selectById(this.settings.selected) }, e.prototype.isElementInViewport = function () { var t = this.content[0].getBoundingClientRect(); return t.top >= 0 && t.left >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight) && t.right <= (window.innerWidth || document.documentElement.clientWidth) }, e.prototype.wrapSelected = function (t) { return "<div class='bselect-default-text'>" + t + "</div>" }, e.prototype.promise = function (t) { return new Promise(function (e, i) { t ? setTimeout(function () { e() }, t) : e() }) }, e.prototype.open = function (e) { var i = this; i.element.trigger("open.bselect", { bselect: i.id, obj: i }), i.content.css("display", "block"), i.settings.checkInView && !i.isElementInViewport() && i.content.css("top", "-" + (t(i.content).height() + 1) + "px"), i.settings.opened = !0, i.promise(i.settings.focusDelay).then(function () { i.searchInput.focus() }), t(document).on("click.bselect.document", function (t) { jQuery.contains(i.element[0], t.target) || null == e || i.close() }), i.element.trigger("opened.bselect", { bselect: i.id, obj: i }) }, e.prototype.close = function (e) { if (this.settings.opened) { this.element.trigger("close.bselect", { bselect: this.id, obj: this }), this.content.css("display", "none"); var i = this; i.promise().then(function () { i.settings.opened = !1, i.searchInput.val(""), i.doneTyping(i, ""), t(document).off("click.bselect.document") }), this.element.trigger("closed.bselect", { bselect: this.id, obj: this }) } }, e.prototype.toggle = function (t) { this.element.trigger("toggle.bselect", { bselect: this.id, obj: this }), this.settings.opened ? this.close(t) : this.open(t), this.element.trigger("toggled.bselect", { bselect: this.id, obj: this }) }, e.prototype.prepend = function (t, e) { this.add("prepend", t, e) }, e.prototype.append = function (t, e) { this.add("append", t, e) }, e.prototype.add = function (t, e, i) { if (null == this.jsonData[e]) { this.jsonData[e] = i; var s = this.buildOption(e); "append" == t ? this.list.append(s) : this.list.prepend(s), this.list_items = this.list.children(), this.bindClick(), this.element.trigger("updated.bselect", { bselect: this.id, obj: this }) } }, e.prototype.selectById = function (t, e) { var i = this.find(t); null != i && this.select(i, e) }, e.prototype.find = function (e) { var i = null; return this.list_items && this.list_items.filter(function () { if (t(this).data("id") == e) return i = t(this), !1 }), i }, e.prototype.findSelected = function (t) { var e = !1; if (this.selectedItems) { var i = this.selectedItems.split(","); i && i.filter(function (i, s) { if (i == t) return e = !0, !1 }) } return e }, e.prototype.getSelected = function () { return this.selectedItems }, e.prototype.select = function (t, e) { if (t.hasClass("bselect-disabled")) return !1; e || this.element.trigger("select.bselect", { bselect: this.id, element: t, obj: this }), this.selectElement(t), this.settings.closeOnSelect && this.close(), e || this.element.trigger("selected.bselect", { bselect: this.id, element: t, obj: this }) }, e.prototype.selectElement = function (t) { if (this.settings.multiple) { null != this.selectedItems && "" != this.selectedItems || this.active.html(""); var e = t.data("id"); this.active.append(this.addItem(t)), this.appendSelectedValue(e), t.addClass("bselect-disabled") } else this.appendSelectedValue(e), this.active.html(this.wrapSelected(t.text())) }, e.prototype.removeSelected = function (e) { this.removeItem(t(e)), this.doneTyping(this, t(this.searchInput).val()), this.element.trigger("unseleced.bselect", { bselect: this.id, element: e, obj: this }) }, e.prototype.disable = function (t) { var e = this.find(t); e && e.addClass("bselect-disabled") }, e.prototype.disabled = function (t) { var e = this.find(t); return !!e && e.hasClass("bselect-disabled") }, e.prototype.selected = function (t) { return this.findSelected(t) }, e.prototype.enable = function (t) { var e = this.find(t); e && e.removeClass("bselect-disabled") }, e.prototype.addItem = function (t) { return '<div class="bselect-multiple-item" id="bselect-multiple-' + t.data("id") + '" data-id="' + t.data("id") + '">' + t.text() + ' <div class="bselect-remove" data-id="' + t.data("id") + '">X</div></div>' }, e.prototype.removeItem = function (t) { var e = t.data("id"); this.removeSelectedValue(e), this.enable(e), t.parent().remove(), "" != this.selectedItems && null != this.selectedItems || this.active.html(this.wrapSelected(this.settings.defaultText)) }, e.prototype.removeSelectedValue = function (t) { var e = this.input.val(); e = e.split(","), e = this.removeA(e, t.toString()), this.selectedItems = e.join(","), this.input.val(this.selectedItems) }, e.prototype.removeA = function (t) { for (var e, i, s = arguments, n = s.length; n > 1 && t.length;)for (e = s[--n]; -1 !== (i = t.indexOf(e));)t.splice(i, 1); return t }, e.prototype.appendSelectedValue = function (t) { var e = this.input.val(); (e = "" != e ? e.split(",") : []).push(t), this.selectedItems = e.join(","), this.input.val(this.selectedItems) }, e.prototype.buildOption = function (t) { return disabled = this.selected(t) ? " bselect-disabled" : "", "<li data-id='" + t + "' class='bselect-item " + this.elipsis + disabled + "'>" + this.jsonData[t] + "</li>" }, e.prototype.doneTyping = function (t, e) { var i = ""; for (var s in t.jsonData) 0 != t.settings.search && -1 === t.jsonData[s].toLowerCase().indexOf(e.toLowerCase()) || (i += t.buildOption(s)); "" == i && (i = '<div class="bselect-no-results">No results.</div>'), t.list.html(i), t.bindClick() }, e.prototype.bindClick = function () { var e = this; this.list.children().off("click.bselect.click").on("click.bselect.click", function (i) { e.select(t(this)) }) }, e.prototype.bind_events = function () { var e = this; t(this.active).on("mousedown.bselect.open", function (i) { t(i.target).hasClass("bselect-remove") && e.settings.multiple ? e.removeSelected(i.target) : e.toggle(i) }), this.bindClick(), t(this.searchInput).on("keyup", function (i) { clearTimeout(e.typingTimer); var s = t(this).val(); e.typingTimer = setTimeout(e.doneTyping, e.doneTypingInterval, e, s) }), t(this.searchInput).on("keydown", function () { clearTimeout(e.typingTimer) }) }, t.fn.bselect = function () { var i = arguments, s = i[0]; if ("string" == typeof s) { var n = t(this).data("bselect"), l = Array.prototype.slice.call(i, 1); return n[s].apply(n, l) } this.each(function () { var i = t(this), n = i.data("bselect"), l = t(this).attr("id"); "object" == typeof s && (i.data("bselect", n = new e(i, s)), null == window.bselect && (window.bselect = []), null == window.bselect[l] && (window.bselect[l] = n)) }) } }(jQuery);